z itertools import permutacje, kombinacje

zbior = zestaw([13])
limit = 70

podczas gdy Prawda:
    pr = set()                          # zmianna do przechowywania permutacji elementów ze zbioru -> 13, 31
    stary_zbior = zbior. copy() # zbioró do porównania czy ilość elemtów się zwiększyła
    dla el w zbiorach: # pętla po wszystkich elementach ze zbioru
        el = str(el) # zmiana na string, by zamieniać swoje kolejności znaków znaków
        el_perm = permutacje(el) # tworzenie permutacji dla danego elementu ze zbioru
        dla n w liście(el_perm): # obektu typu permutations nie może iterować od zamiana na liste
            if len(n) < 2: # jeżli element ze zbioru posiada mniej cyfr niż 2 do nie możemy go permutować
                pr. add(int(n[0])) # przepisanie elemetu bez zmian
            w innym miejscu:
                pr. add(int(n[0]+n[1])) # dodanie nowej permutacji do zbioru pr n[0]+n[1] łączy znaki, n nie jest liczbą liczbą

    pary = kombinacje(pr, 2) # tworzenie wszystkich kobinacji par dwójek
    dla k w liście(pary): # obiekt typu kombinacje nie interają od zamiana na liste
        k_sum = k[0]+k[1] # obliczanie sumy dla danej pary
        jeśli k_sum < limit: # sprawdzanie czy suma nie przekraczaego limitu limitu
            zbior. dodaj(k_sum) # dodanie sumy do zbioru

    # sprawdzanie czy dodano nowy element do zbioru -> obliczenie różnicy zbioru z pętli początku natomiast i z końca
    jeśli lenzbior (zbior. różnica(stary_zbior)) == 0:
        przerwa # opuszczenie pętli przerwa

print("Ostateczna do: {}". format(zbior))
