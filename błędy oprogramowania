
Open In Colab
In [0]:
while True print('Hello world')
  File "<ipython-input-3-2b688bc740d7>", line 1
    while True print('Hello world')
                   ^
SyntaxError: invalid syntax
In [0]:
10 * (1/0)
---------------------------------------------------------------------------
ZeroDivisionError                         Traceback (most recent call last)
<ipython-input-4-0b280f36835c> in <module>()
----> 1 10 * (1/0)

ZeroDivisionError: division by zero
In [0]:
4 + spam*3
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-5-c98bb92cdcac> in <module>()
----> 1 4 + spam*3

NameError: name 'spam' is not defined
In [0]:
'2' + 2
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-6-d2b23a1db757> in <module>()
----> 1 '2' + 2

TypeError: must be str, not int
In [0]:
auta = ['polonez', 'syrena', 'warszawa', 'fiat']

for auto in auta: 
  print(auto)
    print(len(auto))
  File "<ipython-input-8-7f75424f4b6f>", line 5
    print(len(auto))
    ^
IndentationError: unexpected indent
In [0]:
godziny = 144

# oblicz liczbę dni
dni = godziny / 23
print(dni)
6.260869565217392
In [0]:
%debug
import pdb
from pdb import set_trace as bp

wymiary = [400, 100, 250, 300, 123]

wymiaryWMetrach = [x / 100 for x in wymiary]
print("\nWymiary w m:")
for wymiar in wymiaryWMetrach:
    bp()
    print(wymiar)
ERROR:root:No traceback has been produced, nothing to debug.
Wymiary w m:
> <ipython-input-1-9ac7ddd044dc>(11)<module>()
-> print(wymiar)
(Pdb) c
4.0
> <ipython-input-1-9ac7ddd044dc>(10)<module>()
-> bp()
(Pdb) c
1.0
> <ipython-input-1-9ac7ddd044dc>(11)<module>()
-> print(wymiar)
(Pdb) c
2.5
> <ipython-input-1-9ac7ddd044dc>(10)<module>()
-> bp()
(Pdb) c
3.0
> <ipython-input-1-9ac7ddd044dc>(11)<module>()
-> print(wymiar)
(Pdb) c
1.23
In [0]:
while True:
  try:
    x = int(input("Proszę wprowadzić cyfrę: "))
    break
  except ValueError:
    print("Oops! To nie jest numer. Spróbuj ponownie...")
Proszę wprowadzić cyfrę: 1
In [0]:
import sys

try:
    f = open('plik.txt')
    s = f.readline()
    i = int(s.strip())
except OSError as err:
    print("Błąd systemu operacyjnego: {0}".format(err))
except ValueError:
    print("Błąd konwersji danych do liczby.")
except:
    print("Niespodziewany błąd:", sys.exc_info()[0])
    raise
In [0]:
def divide(x, y):
  try:
    result = x / y
  except ZeroDivisionError:
    print("dzielenie przez zero!")
  else:
    print("wynikiem operacji jest", result)
  finally:
    print("kończymy działanie\n")

divide(10, 5)
divide(10, 0)
wynikiem operacji jest 2.0
kończymy działanie

dzielenie przez zero!
kończymy działanie

In [0]:
import unittest

def arithmetic_mean(*args):
    return sum(args) / len(args)

# Tworzymy klase do testowania naszej funkcji
class ArithmeticMeanTests(unittest.TestCase):
    # Testujemy czy zadziała z liczbami naturalnymi
    def test_positive_numbers(self):
        numbers = [1, 3, 4, 5]
        # assertEqual służy do sprawdzenia czy wartości są równe
        # jeśli tak to test się powiedzie, w przeciwnym razie nie
        self.assertEqual(
            arithmetic_mean(*numbers),
            3.25
            )
 
    # Restujemy ale dla liczb ujemnych
    def test_negative_numbers(self):
        numbers = [-1, -5, -19, -21]
        self.assertEqual(
            arithmetic_mean(*numbers),
            -11.5
            )
 
    # Tutaj dla liczb całkowitych
    def test_mixed_numbers(self):
        numbers = [39, -21, 1, 0, 5]
        self.assertEqual(
            arithmetic_mean(*numbers),
            4.8
            )
 
    # Tutaj dla tylko jednej liczby
    def test_single_number(self):
        self.assertEqual(
            arithmetic_mean(129),
            129
            )
 
 
# Uruchamiamy testy
suite = unittest.TestLoader().loadTestsFromTestCase(ArithmeticMeanTests)
unittest.TextTestRunner().run(suite)
....
----------------------------------------------------------------------
Ran 4 tests in 0.004s

OK
Out[0]:
<unittest.runner.TextTestResult run=4 errors=0 failures=0>
