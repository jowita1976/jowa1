  
import numpy jako np
importować wykresowo. graph_objs w podróży 

def znajdz_punkt_oddalonu_o_r_od_pocz_polprostej(pt_p, a, b, r, koniec):
    pkt = znajdz_wsp_punktow_oddalone_o_r(pt_p, a, b, r)
    jeśli koniec == '+':
        jeśli pts[0,0] > pt_p[0]:
            zwraca pkt [0,:]
        w innym miejscu:
            zwraca pkt[1,:]
    elif koniec == '-':
        jeśli pts[0, 0] < pt_p[0]:
            zwraca pkt [0, :]
        w innym miejscu:
            zwraca pkt[1, :]
    w innym miejscu:
        podnieść ValueError('Nieprawidłowo określony koniec półprostej: "-" lub "+"')

def znajdz_wsp_punktow_oddalone_o_r(pt, a, b, r):
    jeśli abs(pt[1] - (a*pt[0]+b)) > 1e-4:
        podnieść ValueError("Punkt nie leży na prostej")

    t = [np. arctan(a), np. arctan(a) + np. pi]
    pts = np. zera([2, 2])
    pts[:, 0] = pt[0] + r * np. cos(t)
    pts[:, 1] = pt[1] + r * np. grzech (t)
    zwraca pkt

def znajdz_parametry_funkcji_przechodzacej_przez_dwa_punkty(pt1, pt2):
    A = np. tablica([pt1[0], 1],
                  [pt2[0], 1]])
    B = np. tablica([pt1[1], pt2[1]])
    powrót np. linalg. rozwiązać(A, B)

def wygeneruj_wykres(a, b, zakres):
    # funkcja jako wyrażenia lambda
    f = lambda x_in: a * x_in + b

    # Współrzędne do wykresu
    x = np. linspace(zakres[0], zakres[1], 2)
    y = f(x)

    powrót do pracy. Punktowy(x=x, y=y, tryb='lines')


def znajdz_punkt_przeciecia(a1, b1, a2, b2):
    A = np. tablica([[- a1, 1],
                  [-a2, 1]])
    B = np. tablica([ b1, b2])
    powrót np. linalg. rozwiązać(A, B)
